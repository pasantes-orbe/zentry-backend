// routes/reservation.routes.ts
import { Request, Response, Router } from "express";
import { check } from "express-validator";
import amenityExists from "../middlewares/customs/amenityExists.middleware";
import countryExists from "../middlewares/customs/countryExists.middleware";
import reservationExists from "../middlewares/customs/reservationExists.middleware";
import userExists from "../middlewares/customs/userExists.middleware";
import noErrors from "../middlewares/noErrors.middleware";
import db from "../models";
import { Model } from "sequelize";
import { ReservationAttributes } from '../interfaces/reservation.interface';

// ðŸš¨ IMPORTACIÃ“N NECESARIA PARA ACCEDER AL SOCKET.IO
// Asumimos que Server.ts exporta la clase Server por defecto
import Server from "../models/server";


// Desestructuramos los modelos necesarios del objeto 'db'
const { reservation, invitation, checkin, amenity, user, notification } = db;

const router = Router();

// ðŸš¨ SE ELIMINÃ“ la lÃ­nea 'const reservationsController = require(...)'.

// Ruta POST principal para crear una reserva
router.post('/', [
Â  Â  check('id_amenity', "El campo 'id_amenity' no puede estar vacÃ­o").notEmpty(),
Â  Â  check('id_amenity', "El campo 'id_amenity' debe ser numÃ©rico").isNumeric(),
Â  Â  check('id_amenity').custom(amenityExists),
Â  Â  check('id_user', "El campo 'id_user' no puede estar vacÃ­o").notEmpty(),
Â  Â  check('id_user', "El campo 'id_user' debe ser numÃ©rico").isNumeric(),
Â  Â  check('id_user').custom(userExists),
Â  Â  check('date', "El campo 'date' no puede estar vacÃ­o").notEmpty(),
Â  Â  noErrors
], async (req: Request, res: Response) => {
Â  Â  const { date, details, id_user, id_amenity, guests } = req.body;

Â  Â  const isPending = await reservation.findOne({
Â  Â  Â  Â  where: {
Â  Â  Â  Â  Â  Â  id_user,
Â  Â  Â  Â  Â  Â  id_amenity,
Â  Â  Â  Â  Â  Â  status: "pendiente"
Â  Â  Â  Â  }
Â  Â  });

Â  Â  if (isPending) {
Â  Â  Â  Â  return res.status(400).send("Ya tenÃ©s una reserva pendiente de aprobaciÃ³n para este lugar de reserva.");
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  // Paso 1: Crear la reserva principal
Â  Â  Â  Â  const newReservation = await reservation.create({
Â  Â  Â  Â  Â  Â  date,
Â  Â  Â  Â  Â  Â  details,
Â  Â  Â  Â  Â  Â  id_user,
Â  Â  Â  Â  Â  Â  id_amenity,
Â  Â  Â  Â  Â  Â  status: "pendiente"
Â  Â  Â  Â  });

Â  Â  Â  Â  // Paso 2: Crear los invitados si existen
Â  Â  Â  Â  if (guests && guests.length > 0) {
Â  Â  Â  Â  Â  Â  const invitations = guests.map((guest: any) => ({
Â  Â  Â  Â  Â  Â  Â  Â  ...guest,
Â  Â  Â  Â  Â  Â  Â  Â  id_reservation: (newReservation as any).id
Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  Â  await invitation.bulkCreate(invitations);
Â  Â  Â  Â  }

Â  Â  Â  Â  // Paso 3: Crear la notificaciÃ³n para el administrador
Â  Â  Â  Â  const newNotification = await notification.create({ // ðŸ’¡ CAPTURAMOS EL OBJETO CREADO
Â  Â  Â  Â  Â  Â  title: 'Nueva Solicitud de Reserva',
Â  Â  Â  Â  Â  Â  content: `El propietario con ID ${id_user} solicitÃ³ una reserva para la amenidad ${id_amenity}.`,
Â  Â  Â  Â  Â  Â  id_user: 1 // ID del administrador
Â  Â  Â  Â  });
        
        // ðŸš¨ PASO 4: EMITIR LA NOTIFICACIÃ“N EN TIEMPO REAL
        // Accedemos a la instancia Singleton del servidor y a su objeto io (Socket.io)
        const serverInstance = Server.instance; 
        
        // Validamos que exista y emitimos el evento que el frontend estÃ¡ escuchando
        if (serverInstance && serverInstance.io) {
            serverInstance.io.emit('new-notification', newNotification);
        }
        
Â  Â  Â  Â  return res.status(201).json(newReservation);

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error al crear la reserva y notificar:", error);
Â  Â  Â  Â  return res.status(500).json({ msg: "Error interno del servidor." });
Â  Â  }
});

router.get('/:id_country', async (req: Request, res: Response) => {
Â  Â  const { status } = req.query;
Â  Â  const { id_country } = req.params;
Â  Â  const idCountryNum = Number(id_country);

Â  Â  if (status) {
Â  Â  Â  Â  if (typeof status === 'string') {
Â  Â  Â  Â  Â  Â  const reservations = await reservation.findAll({
Â  Â  Â  Â  Â  Â  Â  Â  where: { status },
Â  Â  Â  Â  Â  Â  Â  Â  include: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  model: amenity,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  as: 'amenity'
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  const filtered = reservations.filter((reservation: any) => {
Â  Â  Â  Â  Â  Â  Â  Â  const amenity = reservation.get('amenity') as Model & { id_country?: number } | null;
Â  Â  Â  Â  Â  Â  Â  Â  return amenity?.id_country === idCountryNum;
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  return res.json(filtered);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ msg: "El parÃ¡metro 'status' debe ser un string" });
Â  Â  Â  Â  }
Â  Â  }

Â  Â  const reservations = await reservation.findAll({
Â  Â  Â  Â  include: {
Â  Â  Â  Â  Â  Â  model: amenity,
Â  Â  Â  Â  Â  Â  as: 'amenity'
Â  Â  Â  Â  }
Â  Â  });

Â  Â  const filtered = reservations.filter((reservation: any) => {
Â  Â  Â  Â  const amenity = reservation.get('amenity') as Model & { id_country?: number } | null;
Â  Â  Â  Â  return amenity?.id_country === idCountryNum;
Â  Â  });

Â  Â  return res.json(filtered);
});

router.patch('/:id_reservation/:status', [
Â  Â  check('id_reservation', "El campo 'id_reservation' no puede estar vacÃ­o").notEmpty(),
Â  Â  check('id_reservation', "El campo 'id_reservation' debe ser numÃ©rico").isNumeric(),
Â  Â  check('status', "El campo 'status' no puede estar vacÃ­o").notEmpty(),
Â  Â  check('status', "El campo 'status' debe ser booleano").isBoolean(),
Â  Â  reservationExists, // AquÃ­ se usa el middleware correctamente
Â  Â  noErrors
], async (req: Request, res: Response) => {
Â  Â  let msg = "";
Â  Â  let newStatus = "";
Â  Â  const { status, id_reservation } = req.params;

Â  Â  if (status === 'false') {
Â  Â  Â  Â  msg = "Se cambiÃ³ el estado de la reserva a 'Rechazado'";
Â  Â  Â  Â  newStatus = "rechazado";
Â  Â  }
Â  Â  if (status === 'true') {
Â  Â  Â  Â  msg = "Se cambiÃ³ el estado de la reserva a 'Aprobado'";
Â  Â  Â  Â  newStatus = "aprobado";
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  await reservation.update({ status: newStatus }, {
Â  Â  Â  Â  Â  Â  where: { id: id_reservation }
Â  Â  Â  Â  });

Â  Â  Â  Â  const event = await reservation.findByPk(id_reservation, {
Â  Â  Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  Â  Â  { model: user, as: 'user' },
Â  Â  Â  Â  Â  Â  Â  Â  { model: amenity, as: 'amenity' }
Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  }) as any;

Â  Â  Â  Â  if (!event) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: "Reserva no encontrada" });
Â  Â  Â  Â  }

Â  Â  Â  Â  if (!event.user) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: "Usuario asociado no encontrado" });
Â  Â  Â  Â  }

Â  Â  Â  Â  if (!event.amenity) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: "Amenidad asociada no encontrada" });
Â  Â  Â  Â  }

Â  Â  Â  Â  const id_owner = event.user.id;
Â  Â  Â  Â  const id_country = event.amenity.id_country;

Â  Â  Â  Â  if (!event.date) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ msg: "La reserva no tiene fecha definida" });
Â  Â  Â  Â  }

Â  Â  Â  Â  const invitations = await invitation.findAll({ where: { id_reservation } });

Â  Â  Â  Â  const invitations_to_checkin = invitations.map((invitation: any) => ({
Â  Â  Â  Â  Â  Â  guest_name: invitation.name,
Â  Â  Â  Â  Â  Â  guest_lastname: invitation.lastname,
Â  Â  Â  Â  Â  Â  DNI: invitation.dni,
Â  Â  Â  Â  Â  Â  confirmed_by_owner: true,
Â  Â  Â  Â  Â  Â  check_in: false,
Â  Â  Â  Â  Â  Â  check_out: false,
Â  Â  Â  Â  Â  Â  income_date: event.date,
Â  Â  Â  Â  Â  Â  id_owner,
Â  Â  Â  Â  Â  Â  id_country
Â  Â  Â  Â  }));

Â  Â  Â  Â  await checkin.bulkCreate(invitations_to_checkin);


Â  Â  } catch (error) {
Â  Â  Â  Â  return res.status(500).send({
Â  Â  Â  Â  Â  Â  msg: "Error interno en el servidor"
Â  Â  Â  Â  });
Â  Â  }

Â  Â  return res.json({ msg });
});

router.get('/get_by_user/:id_user', [
Â  Â  check('id_user', "El campo 'id_user' debe ser numÃ©rico").isNumeric(),
Â  Â  check('id_user').custom(userExists)
], async (req: Request, res: Response) => {
Â  Â  const { id_user } = req.params;
Â  Â  const reservations = await reservation.findAll({
Â  Â  Â  Â  where: { id_user }
Â  Â  });
Â  Â  return res.json(reservations);
});

router.get('/country/get_by_id/:id_country', [
Â  Â  check('id_country', "El campo 'id_country' debe ser numÃ©rico").isNumeric(),
Â  Â  check('id_country', "El campo 'id_country' es obligatorio").notEmpty(),
Â  Â  check('id_country').custom(countryExists)
], async (req: Request, res: Response) => {
Â  Â  const { id_country } = req.params;
Â  Â  const idCountryNum = Number(id_country);

Â  Â  const reservations = await reservation.findAll({
Â  Â  Â  Â  include: [
Â  Â  Â  Â  Â  Â  { model: user, as: 'user' },
Â  Â  Â  Â  Â  Â  { model: amenity, as: 'amenity' }
Â  Â  Â  Â  ]
Â  Â  });

Â  Â  const filtered = reservations.filter((reservation: any) => {
Â  Â  Â  Â  const amenity = reservation.get('amenity') as Model & { id_country?: number } | null;
Â  Â  Â  Â  return amenity?.id_country === idCountryNum;
Â  Â  });

Â  Â  return res.json(filtered);
});

export default router;